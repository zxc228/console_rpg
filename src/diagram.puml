@startuml

!define RECTANGLE class
!define TEXT class

RECTANGLE "Main" as Main {
  +main(args: String[])
}

RECTANGLE "GameController" as GameController {
  -DamageCalculator damageCalculator
  -Hero hero
  -Enemy enemy
  -Strategy strategy
  -Action action
  -Scanner scanner
  -int enemyCount
  -int totalDamageDealt
  -int totalDamageReceived
  -int heroStrengthIncrease
  -int heroEnduranceIncrease
  -int heroAgilityIncrease
  -int enemyStrengthIncrease
  -int enemyEnduranceIncrease
  -int enemyAgilityIncrease
  +GameController()
  +void initializeGame()
  -void chooseDifficulty()
  -void chooseEnemy()
  -void chooseStrategy()
  -void defineAction()
  -void displayStats()
  +void startBattle()
  +void runGame()
  -void displayFinalStats()
  +Hero getHero()
  +Enemy getEnemy()
}

RECTANGLE "Character" as Character {
  -String name
  -int strength
  -int endurance
  -int agility
  -State state
  +Character(String name, int strength, int endurance, int agility)
  +void attack(Character target)
  +void defend()
  +String getName()
  +void setName(String name)
  +int getStrength()
  +void setStrength(int strength)
  +int getEndurance()
  +void setEndurance(int endurance)
  +int getAgility()
  +void setAgility(int agility)
  +void setState(State state)
  +void performAction()
}

RECTANGLE "Hero" as Hero {
  +Hero(String name, int strength, int endurance, int agility)
}

RECTANGLE "Enemy" as Enemy {
  +Enemy(String name, int strength, int endurance, int agility)
  +void decideNextAction(Character target)
}

RECTANGLE "State" as State {
  +void handle(Character character)
}

RECTANGLE "NormalState" as NormalState {
  +void handle(Character character)
}

RECTANGLE "WoundedState" as WoundedState {
  +void handle(Character character)
}

RECTANGLE "ParalyzedState" as ParalyzedState {
  +void handle(Character character)
}

RECTANGLE "Strategy" as Strategy {
  +void execute(Character character)
}

RECTANGLE "AggressiveStrategy" as AggressiveStrategy {
  +void execute(Character character)
}

RECTANGLE "BalancedStrategy" as BalancedStrategy {
  +void execute(Character character)
}

RECTANGLE "Action" as Action {
  +void execute(Character character, Character target)
}

RECTANGLE "PowerfulAttackDecorator" as PowerfulAttackDecorator {
  -Action wrappedAction
  +PowerfulAttackDecorator(Action wrappedAction)
  +void execute(Character character, Character target)
}

RECTANGLE "CriticalStrikeDecorator" as CriticalStrikeDecorator {
  -Action wrappedAction
  +CriticalStrikeDecorator(Action wrappedAction)
  +void execute(Character character, Character target)
}

RECTANGLE "DamageCalculator" as DamageCalculator {
  -static DamageCalculator instance
  +static DamageCalculator getInstance()
  +int calculateDamage(Character attacker, Character target)
}

RECTANGLE "EnemyFactory" as EnemyFactory {
  +Enemy createWarrior()
  +Enemy createSorcerer()
  +Enemy createMutant()
}

RECTANGLE "JungleEnemyFactory" as JungleEnemyFactory {
  +Enemy createWarrior()
  +Enemy createSorcerer()
  +Enemy createMutant()
}

RECTANGLE "SeaEnemyFactory" as SeaEnemyFactory {
  +Enemy createWarrior()
  +Enemy createSorcerer()
  +Enemy createMutant()
}

Main --> GameController
GameController --> Hero
GameController --> Enemy
GameController --> Strategy
GameController --> Action
GameController --> DamageCalculator
Character <|-- Hero
Character <|-- Enemy
Character --> State
Character --> Action
State <|-- NormalState
State <|-- WoundedState
State <|-- ParalyzedState
Strategy <|-- AggressiveStrategy
Strategy <|-- BalancedStrategy
Action <|-- PowerfulAttackDecorator
Action <|-- CriticalStrikeDecorator
DamageCalculator o-- DamageCalculator : singleton
EnemyFactory <|-- JungleEnemyFactory
EnemyFactory <|-- SeaEnemyFactory

@enduml
