@startuml

package characters {
    class Character {
        - String name
        - int strength
        - int endurance
        - int agility
        - State state
        + attack(Character target)
        + setState(State state)
        + getName()
        + getStrength()
        + setStrength(int strength)
        + getEndurance()
        + setEndurance(int endurance)
        + getAgility()
        + setAgility(int agility)
        + displayStats()
    }

    class Hero extends Character {
        + Hero(String name, int strength, int endurance, int agility)
        + attack(Character target)
        + defend()
    }

    class Enemy extends Character {
        + Enemy(String name, int strength, int endurance, int agility)
        + decideNextAction(Character target)
    }
}

package states {
    interface State {
        + handle(Character character)
    }

    class NormalState implements State {
        + handle(Character character)
        + toString()
    }

    class WoundedState implements State {
        + handle(Character character)
        + toString()
    }

    class ParalyzedState implements State {
        + handle(Character character)
        + toString()
    }
}

package strategies {
    interface Strategy {
        + execute(Character character)
    }

    class AggressiveStrategy implements Strategy {
        + execute(Character character)
    }

    class BalancedStrategy implements Strategy {
        + execute(Character character)
    }

    class DefensiveStrategy implements Strategy {
        + execute(Character character)
    }
}

package actions {
    abstract class Action {
        + execute(Character character, Character target)
    }

    class NormalAttackDecorator extends Action {
        - Action wrappedAction
        + NormalAttackDecorator(Action wrappedAction)
        + execute(Character character, Character target)
    }

    class PowerfulAttackDecorator extends Action {
        - Action wrappedAction
        + PowerfulAttackDecorator(Action wrappedAction)
        + execute(Character character, Character target)
    }

    class CriticalStrikeDecorator extends Action {
        - Action wrappedAction
        + CriticalStrikeDecorator(Action wrappedAction)
        + execute(Character character, Character target)
    }
}

package factories {
    interface EnemyFactory {
        + createWarrior()
        + createSorcerer()
        + createMutant()
    }

    class JungleEnemyFactory implements EnemyFactory {
        + createWarrior()
        + createSorcerer()
        + createMutant()
    }

    class SeaEnemyFactory implements EnemyFactory {
        + createWarrior()
        + createSorcerer()
        + createMutant()
    }
}

package controllers {
    class GameController {
        - DamageCalculator damageCalculator
        - Hero hero
        - Enemy enemy
        - Strategy strategy
        - Action action
        - Scanner scanner
        - int enemyCount
        - int totalDamageDealt
        - int totalDamageReceived
        - int difficulty
        - int heroStrengthIncrease
        - int heroEnduranceIncrease
        - int heroAgilityIncrease
        + GameController()
        + initializeGame()
        + chooseDifficulty()
        + chooseEnemy()
        + chooseStrategy()
        + defineAction()
        + startBattle()
        + runGame()
        + displayFinalStats()
        + pause(int milliseconds)
        + updateState(Character character)
        + getHero()
        + getEnemy()
    }
}

package utilities {
    class DamageCalculator {
        + calculateDamage(Character attacker, Character target)
        + getInstance()
    }
    DamageCalculator --|> GameController
}

Character "1" -- "1" State
Character <|-- Hero
Character <|-- Enemy
Hero "1" -- "1" Strategy
Hero "1" -- "1" Action

State <|-- NormalState
State <|-- WoundedState
State <|-- ParalyzedState

Strategy <|-- AggressiveStrategy
Strategy <|-- BalancedStrategy
Strategy <|-- DefensiveStrategy

Action <|-- NormalAttackDecorator
Action <|-- PowerfulAttackDecorator
Action <|-- CriticalStrikeDecorator

EnemyFactory <|-- JungleEnemyFactory
EnemyFactory <|-- SeaEnemyFactory

GameController "1" -- "1" Hero
GameController "1" -- "1" Enemy
GameController "1" -- "1" Strategy
GameController "1" -- "1" Action
GameController "1" -- "1" DamageCalculator
GameController "1" -- "1" Scanner

@enduml
